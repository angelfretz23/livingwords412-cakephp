<?php
namespace App\Controller\Api;

use Cake\Datasource\ConnectionManager;
use Cake\Network\Exception\BadRequestException;

/**
 * News Controller
 * * @property \App\Model\Table\BibleBookVerseTable $BibleBookVerse
 * * @property \App\Model\Table\BibleTypeTable $BibleType
 * * @property \App\Model\Table\BooksOfBibleTable $BooksOfBible
 * * @property \App\Model\Table\ChapterNumberOfBookTable $ChapterNumberOfBook
 * * @property \App\Model\Table\TagScriptureTable $TagScripture
 * * @property \App\Model\Table\TagBookScriptureTable $TagBookScripture
 * * @property \App\Model\Table\UploadVerseIdsTable $UploadVerseIds
 * * @property \App\Model\Table\MovieVerseIdsTable $MovieVerseIds
 *
 */
class BibleController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('BibleBookVerse');
        $this->loadModel('MovieVerseIds');
        $this->loadModel('TagBookScripture');
        $this->loadModel('UploadVerseIds');
        $this->loadModel('BibleType');
        $this->loadModel('TagScripture');
        $this->loadModel('BooksOfBible');
        $this->loadModel('ChapterNumberOfBook');
    }

    /**
     * @return \Cake\Network\Response|null
     * 
     * get book with verse where book name equal Exodus
     */
    public function index(){
        $bibleType = $this->BibleType->find()
           ->matching('BooksOfBible.ChapterNumberOfBook.BibleBookVerse',function ($q) {
               return $q->where(['BooksOfBible.book_name' => 'Exodus']);
        })->toArray();
        
        return $this->jsonResponse($bibleType);
    }

    /**
     * @return \Cake\Network\Response|null
     *
     * get verses according to selected book, chapter and verse
     * if data in verse off the method return all verses according to selected chapter and book
     */
    public function add(){
        if($this->request->is('post')){
            $data = $this->request->data();
            $book = $data['book'];
            $chapter = $data['chapter'];
            $verse = $data['verse'];
            if($verse == ''){

                $bibleType = $this->BibleType->find()
                    ->matching('BooksOfBible.ChapterNumberOfBook.BibleBookVerse', function ($q) use ($book, $chapter, $verse) {
                        return $q->where(['BooksOfBible.book_name' => $book, 'ChapterNumberOfBook.chapter' => $chapter]);
                    })->toArray();

                for ($i = 0; $i<count($bibleType); $i++){
                    $verseId = $bibleType[$i]['_matchingData']['BibleBookVerse']['id'];
                    $checkMusic = $this->TagScripture->find()->where(['id_of_verse' => $verseId])->first();
                    $checkBook = $this->TagBookScripture->find()->where(['verse_id_each' => $verseId])->first();
                    $checkSermon = $this->UploadVerseIds->find()->where(['verse_id_each' => $verseId])->first();
                    $checkMovie = $this->MovieVerseIds->find()->where(['verse_id_each' => $verseId])->first();
                    $checked = $this->checkIfArrEmpty($checkMusic, $checkBook, $checkSermon, $checkMovie);
                    $checkedArr = ['checkedMedia'=>$checked];
                    $arrDecoded[$i] = json_decode($bibleType[$i], TRUE);
                    $mergedArr[$i] = array_merge($arrDecoded[$i], $checkedArr);
                }
                return $this->jsonResponse($mergedArr);
            }else {
                $bibleType = $this->BibleType->find()
                    ->matching('BooksOfBible.ChapterNumberOfBook.BibleBookVerse', function ($q) use ($book, $chapter, $verse) {
                        return $q->where(['BooksOfBible.book_name' => $book, 'ChapterNumberOfBook.chapter' => $chapter, 'BibleBookVerse.verse_number' => $verse]);
                    })->toArray();
                /**
                 * check in ios if empty one of music or book or sermon or movie
                 */
                $verseId = $bibleType[0]['_matchingData']['BibleBookVerse']['id'];
                $checkMusic = $this->TagScripture->find()->where(['id_of_verse' => $verseId])->first();
                $checkBook = $this->TagBookScripture->find()->where(['verse_id_each' => $verseId])->first();
                $checkSermon = $this->UploadVerseIds->find()->where(['verse_id_each' => $verseId])->first();
                $checkMovie = $this->MovieVerseIds->find()->where(['verse_id_each' => $verseId])->first();
//                $checked = $this->checkIfArrEmpty($checkMusic, $checkBook, $checkSermon, $checkMovie);
                $checked = $this->checkIfArrEmpty($checkMusic, $checkBook, $checkSermon, $checkMovie);
                $checkedArr = ['checkedMedia'=>$checked];
//                    dump($checkedArr);
                $mergedArr = array_merge($bibleType, $checkedArr);
                return $this->jsonResponse([$mergedArr]);
            }
        }
    }

    /**
     * @return \Cake\Network\Response|null
     *
     * get name of book
     */
    public function getBooksName(){
        $bookName = $this->BooksOfBible->find()->select(['book_name'])->toArray();
        return $this->jsonResponse($bookName);


    }

    /**
     * @param $checkMusic
     * @param $checkBook
     * @param $checkSermon
     * @param $checkMovie
     * @return string
     *
     * method for checking music, book, sermon and movie
     */
    private function checkIfArrEmpty($checkMusic, $checkBook, $checkSermon, $checkMovie)
    {
        if($checkMusic == null && $checkBook == null && $checkSermon == null && $checkMovie == null){
            return 'null';
        }elseif ($checkBook != null && $checkSermon == null && $checkMovie == null && $checkMusic == null){
            return 'book';
        }elseif ($checkBook != null && $checkSermon != null && $checkMovie == null && $checkMusic == null){
            return 'book_sermon';
        }elseif ($checkBook != null && $checkSermon != null && $checkMovie != null && $checkMusic == null){
            return 'book_sermon_movie';
        }elseif ($checkBook != null && $checkSermon != null && $checkMovie != null && $checkMusic != null){
            return 'book_sermon_movie_music';
        }elseif ($checkBook == null && $checkSermon != null && $checkMovie != null && $checkMusic != null){
            return 'sermon_movie_music';
        }elseif ($checkBook == null && $checkSermon == null && $checkMovie != null && $checkMusic != null){
            return 'movie_music';
        }elseif ($checkBook == null && $checkSermon != null && $checkMovie == null && $checkMusic != null){
            return 'sermon_music';
        }elseif ($checkBook != null && $checkSermon == null && $checkMovie == null && $checkMusic != null){
            return 'book_music';
        }elseif ($checkBook == null && $checkSermon != null && $checkMovie != null && $checkMusic == null){
            return 'sermon_movie';
        }elseif ($checkBook != null && $checkSermon == null && $checkMovie != null && $checkMusic == null){
            return 'book_movie';
        }elseif ($checkBook == null && $checkSermon != null && $checkMovie == null && $checkMusic == null){
            return 'sermon';
        }elseif ($checkBook == null && $checkSermon == null && $checkMovie != null && $checkMusic != null){
            return 'movie';
        }elseif ($checkBook == null && $checkSermon == null && $checkMovie == null && $checkMusic != null){
            return 'music';
        }
    }

    /**
     * @return \Cake\Network\Response|null
     * 
     * books searching
     */
    public function getBookType()
    {
        if ($this->request->is('post')){
            $data = $this->request->data();
            $key = $data['key'];
            $book = $this->BooksOfBible->getBookBible($key);
            return $this->jsonResponse($book);
        }
        
        throw new BadRequestException;
    }
}
