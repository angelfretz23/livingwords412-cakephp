<?php
namespace App\Controller\Api;

use Cake\Auth\DefaultPasswordHasher;
use Cake\Core\Configure;
use Cake\Mailer\Email;
use Cake\Network\Exception\MethodNotAllowedException;
use Cake\Network\Exception\BadRequestException;
use Cake\Network\Http\Client;
use Cake\Event\Event;
use Cake\Cache\Cache;
use Cake\Collection\Collection;
use Cake\ORM\Entity;


/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 * @property \App\Model\Table\PasswordsResetsTable $PasswordsResets
 */
class UsersController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('PasswordsResets');
    }

    /**
     * @param Event $event
     */
    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }

    /**
     * Register user in app
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function register()
    {
        if($this->request->is('post')){
        $data = $this->request->data;
            if($data['content_type'] == '') {
                $data['content_type'] = 'user';
            }
//            var_dump($data);die();
//            $exist = $this->Users->checkEmail($data['email']);
//            if($exist){
//                return $this->jsonResponse(__('email_exist'), 403);
//            }
        $user = $this->Users->registration($data);
        $code = 200;
        if (method_exists($user, 'errors')) {
            $user = $user->errors();
            $code = 422;
        }

        return $this->jsonResponse($user, $code);
        }
//        throw new MethodNotAllowedException;
    }
    

    /**
     * Login in app
     *
     * @return \Cake\Network\Response|null
     */
    public function login()
    {
        if($this->request->is('post')) {
            $data = $this->request->data();
            $user = $this->Users->auth($data);
            if ($user) {
                return $this->jsonResponse(
                    $user
                    , 200, 'user_' . $user->id);
            }
            return $this->jsonResponse(__('login_failed'), 404);
        }
//        throw new MethodNotAllowedException;
    }

    /**
     * Logout from app
     *
     * @return \Cake\Network\Response|null
     */
    public function logout()
    {
        if ($this->request->is('post')) {
//            $data = $this->request->data;
            return $this->jsonResponse(['message' => 'success']);
        }
        throw new BadRequestException;
    }



    /**
     * Registration via Facebook
     *
     * @return \Cake\Network\Response|null
     */
    public function facebookRegistration()
    {
        $facebookToken = $this->request->data['token'];
        
        $req = new Client();
        $facebookResponse = $req->get('https://graph.facebook.com/v2.6/me?access_token=' . $facebookToken . '&fields=email,name');
        $tmp = json_decode($facebookResponse->body());

//        //create user via facebook
        $checkSoc = $this->Users->checkSocial($this->request->data['type'], $tmp->id);
        if ($checkSoc == null) {

            $user = $this->Users->newEntity();
            $user->email = isset($tmp->email) ? $tmp->email : '';

            $user->fb_id = $tmp->id;
            $this->Users->save($user);
            $token = $user->access_token;
            $user['access_token'] = $token;

            return $this->jsonResponse($user);
        }

        //for return access_token in response
        $token = $checkSoc->access_token;
        $checkSoc['access_token'] = $token;

        return $this->jsonResponse($checkSoc);
    }

    /**
     * @return \Cake\Network\Response|null
     *
     * registration via google+
     */
    public function googleRegistration()
    {
        $data = $this->request->data();

        $check = $this->Users->checkSocial($data['type'], $data['id']);

        if(!$check){
            $user = $this->Users->newEntity();
            $user->email = isset($data['email']) ? $data['email'] : '';
            $user->gp_id = $data['id'];
            $this->Users->save($user);
            $token = $user->access_token;
            $user = $user->toArray();
            $user['access_token'] = $token;
            return $this->jsonResponse($user, 201);
        }

        $token = $check->access_token;
        $check = $check->toArray();
        $check['access_token'] = $token;

        return $this->jsonResponse($check);
    }

    /**
     * @return \Cake\Network\Response|null
     * 
     * reset password
     * check if user email exist id database
     * send on email link which redirect to successReset action
     */
    public function resetPassword()
    {
        $data = $this->request->data;
        if ($this->request->is('post')) {

                $user = $this->Users->checkUserEmail($data['email']);
                if ($user) {
                    $resetPassword = $this->PasswordsResets->newEntity([
                        'user_id' => $user->id,
                        'code' => $this->generatePass()
                    ]);

                    $this->PasswordsResets->save($resetPassword);

                    $createdLink = $this->createLink($resetPassword->code, $user->id);

                    $email = new Email();
                    $email
                        ->template('reset_password', 'default')
                        ->emailFormat('html')
                        ->from(['bible.bible.2017@yandex.ru' => 'Bible Application'])
                        ->to($user->email)
                        ->subject('Reset Password')
                        ->viewVars([
                            'user' => $user,
                            'code' => $resetPassword->code
                        ])
                        ->send();
                    return $this->jsonResponse([
                        'message' => 'check your email'
                    ]);
                }
                return $this->jsonResponse(['invalid email'], 404);
        }
        throw new BadRequestException;
    }

    /**
     * @return \Cake\Network\Response|null
     *
     * check if code from email exist in database if exist return user_id
     */
    public function checkCode()
    {
        $data = $this->request->data;
        if ($this->request->is('post')) {

            $checkCode = $this->PasswordsResets->find()
                ->where([
                    'code' => $data['code'],
                ])
                ->first();
            if($checkCode){
                return $this->jsonResponse($checkCode['user_id']);
            }else{
                return $this->jsonResponse(['invalid code'], 404);
            }
        }
    }

    /**
     * @return \Cake\Network\Response|null
     *
     * if code the same change password
     */
    public function successCode(){
        $data = $this->request->data;
        if ($this->request->is('post')) {
            $user = $this->Users->get($data['user_id']);
            $user->password = $data['new_password'];
            $this->Users->save($user);
            return $this->jsonResponse(__('success_reset'));
        }
    }

    /**
     * @return string
     * 
     * generate random password
     */
    private function generatePass()
    {
        $characters = '91233424897489237481274891237489217';
        $resetPassword = substr(str_shuffle($characters), 0, 4);
        return $resetPassword;


    }

    /**
     * @param $code
     * @param $userId
     * @return string
     * 
     * create link with code and user id
     */
    private function createLink($code, $userId)
    {
        $passHasher = new DefaultPasswordHasher();
        return 'http://' . $_SERVER['HTTP_HOST']
        . '/api/users/password/reset?code=' . $passHasher->hash($code) . '&user=' . $userId;
    }
}
